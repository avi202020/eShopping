{"version":3,"sources":["./src/app/api/checkout/checkout.component.html","./src/app/api/cart/model/cart-shipping-address.ts","./src/app/api/checkout/checkout-routing.module.ts","./src/app/api/checkout/checkout.component.css","./src/app/api/checkout/checkout.component.ts","./src/app/api/checkout/checkout.module.ts"],"names":[],"mappings":"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","file":"checkout-checkout-module-es2015.js","sourcesContent":["module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div class=\\\"container container-fluid\\\">\\n  <h1 style=\\\"text-align: center\\\"> Checkout</h1>\\n  <br/>\\n\\n  <div class=\\\"card border-info\\\">\\n    <div class=\\\"card-header\\\"> <h4> Review Items </h4></div>\\n    <div class=\\\"card-body\\\">\\n      <div *ngIf=\\\"cartDataAvailable()\\\" class=\\\"table-responsive-sm table-responsive-xs table-responsive-md table-responsive-lg\\\">\\n        <table class=\\\"table\\\">\\n          <thead style=\\\"text-align: center\\\">\\n          <tr>\\n            <th scope=\\\"col\\\">#</th>\\n            <th scope=\\\"col\\\">Product</th>\\n            <th scope=\\\"col\\\">Quantity</th>\\n            <th scope=\\\"col\\\">Cost</th>\\n            <th scope=\\\"col\\\"></th>\\n          </tr>\\n          </thead>\\n          <tbody style=\\\"text-align: center\\\">\\n          <tr *ngFor=\\\"let cartProduct of (cart.cartProducts); index as i\\\">\\n            <th scope=\\\"row\\\">{{i + 1}}</th>\\n            <td><a [routerLink]=\\\"['/product', cartProduct.product.id]\\\">{{cartProduct.product.name}}</a></td>\\n            <td>{{cartProduct.quantity}}</td>\\n            <td>{{cartProduct.product.price.currency.symbol}} {{cartProduct.quantity * cartProduct.product.price.amount}}</td>\\n          </tr>\\n          </tbody>\\n          <tfoot style=\\\"text-align: center\\\">\\n          <tr>\\n            <td></td>\\n            <td></td>\\n            <td></td>\\n            <th>Tax = ${{taxAmount | number:'1.2-2'}}</th>\\n          </tr>\\n          <tr>\\n            <td></td>\\n            <td></td>\\n            <td></td>\\n            <th><h5>Total Cost = ${{totalCost.toPrecision(6)}}</h5></th>\\n          </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n  <br/>\\n\\n  <!-- Shipping Address -->\\n  <div class=\\\"card border-info\\\">\\n    <div class=\\\"card-header\\\"> <h4> Shipping Address </h4> </div>\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"table-responsive-sm table-responsive-xs table-responsive-md table-responsive-lg\\\">\\n        <div *ngIf=\\\"addressesAvailable()\\\">\\n          <div *ngFor=\\\"let address of addresses\\\" class=\\\"row\\\">\\n            <div class=\\\"col-6\\\">\\n              <div class=\\\"form-check\\\" style=\\\"margin: 10px\\\">\\n                <label class=\\\"form-check-label\\\" style=\\\"font-weight: bold\\\">\\n                  <input class=\\\"form-check-input\\\" name=\\\"shippingAddress\\\" type=\\\"radio\\\" value=\\\"{{address}}\\\" (change)=\\\"changeShippingAddress(address)\\\" >{{address.addressType.type}}\\n                </label>\\n              </div>\\n              <address style=\\\"margin-left: 20px\\\">\\n                {{address.streetName}}<br>\\n                Apt {{address.apartment}}<br>\\n                {{address.city.name}}, {{address.state.name}} - {{address.zipCode}}<br>\\n              </address>\\n              <br>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n              <button (click)=\\\"openModal(addressEditModal,address)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Edit</button>\\n              <input (click)=\\\"deleteAddress(address)\\\" class=\\\" btn btn-danger\\\" style=\\\"margin: 10px\\\" type=\\\"button\\\" value=\\\"Delete\\\">\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"card-footer\\\">\\n          <button (click)=\\\"openModal(addressEditModal,null)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Create New</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <br/>\\n\\n  <!-- Billing Address -->\\n  <div class=\\\"card border-info\\\">\\n    <div class=\\\"card-header\\\"> <h4> Billing Address </h4></div>\\n    <div class=\\\"card-body\\\">\\n    <div class=\\\"table-responsive-sm table-responsive-xs table-responsive-md table-responsive-lg\\\">\\n      <div *ngIf=\\\"addressesAvailable()\\\">\\n        <div *ngFor=\\\"let address of addresses\\\" class=\\\"row\\\">\\n          <div class=\\\"col-6\\\">\\n            <div class=\\\"form-check\\\" style=\\\"margin: 10px\\\">\\n              <label class=\\\"form-check-label\\\" style=\\\"font-weight: bold\\\">\\n                <input class=\\\"form-check-input\\\" name=\\\"billingAddress\\\" type=\\\"radio\\\" value=\\\"{{address}}\\\" (change)=\\\"changeBillingAddress(address)\\\">{{address.addressType.type}}\\n              </label>\\n            </div>\\n            <address style=\\\"margin: 10px\\\">\\n                {{address.streetName}}<br>\\n                Apt {{address.apartment}}<br>\\n                {{address.city.name}}, {{address.state.name}} - {{address.zipCode}}<br>\\n            </address>\\n          </div>\\n          <div class=\\\"col-6\\\">\\n            <button (click)=\\\"openModal(addressEditModal,address)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Edit</button>\\n            <input (click)=\\\"deleteAddress(address)\\\" class=\\\" btn btn-danger\\\" style=\\\"margin: 10px\\\" type=\\\"button\\\" value=\\\"Delete\\\">\\n          </div>\\n          <br>\\n        </div>\\n      </div>\\n      <div class=\\\"card-footer\\\">\\n        <button (click)=\\\"openModal(addressEditModal,null)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Create New</button>\\n      </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <!-- Address Modal-->\\n  <ng-template #addressEditModal>\\n    <div (click)=\\\"modalRef.hide()\\\" class=\\\"modal-header\\\">\\n      <h3 class=\\\"modal-title\\\">Edit Address</h3>\\n      <button aria-label=\\\"Close\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" type=\\\"button\\\">\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\n      </button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n      <form [formGroup]=\\\"addressForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label>Address Type\\n            <select [compareWith]=\\\"compareAddressTypeFn\\\" class=\\\"form-control\\\" formControlName=\\\"addressType\\\"\\n                    name=\\\"addressType\\\">\\n              <option *ngFor=\\\"let addressType of addressTypes\\\" [ngValue]=\\\"addressType\\\">\\n                {{addressType.type}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"col-6\\\">\\n            <label for=\\\"streetName\\\">Street Name</label>\\n            <input class=\\\"form-control\\\" formControlName=\\\"streetName\\\" id=\\\"streetName\\\" placeholder=\\\"Enter Street Name\\\"\\n                   required type=\\\"text\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"col-6\\\">\\n            <label for=\\\"apartment\\\">Apartment</label>\\n            <input class=\\\"form-control\\\" formControlName=\\\"apartment\\\" id=\\\"apartment\\\" placeholder=\\\"Enter Apartment Number\\\"\\n                   required type=\\\"text\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label>Country\\n            <select (change)=\\\"loadStates()\\\" [compareWith]=\\\"compareCountryFn\\\" class=\\\"form-control\\\" formControlName=\\\"country\\\"\\n                    name=\\\"country\\\">\\n              <option *ngFor=\\\"let country of countries\\\" [ngValue]=\\\"country\\\">\\n                {{country.name}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label>State\\n            <select (change)=\\\"loadCities()\\\"  [compareWith]=\\\"compareStateFn\\\" class=\\\"form-control\\\" formControlName=\\\"state\\\"\\n                    name=\\\"state\\\">\\n              <option *ngFor=\\\"let state of states\\\" [ngValue]=\\\"state\\\">\\n                {{state.name}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label>City\\n            <select [compareWith]=\\\"compareCityFn\\\" class=\\\"form-control\\\" formControlName=\\\"city\\\" name=\\\"city\\\">\\n              <option *ngFor=\\\"let city of cities\\\" [ngValue]=\\\"city\\\">\\n                {{city.name}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"col-3\\\">\\n            <label for=\\\"zipCode\\\">Zip Code</label>\\n            <input class=\\\"form-control\\\" formControlName=\\\"zipCode\\\" id=\\\"zipCode\\\" placeholder=\\\"Enter Zip Code\\\"\\n                   required type=\\\"text\\\">\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n      <button (click)=\\\"updateUserAddress()\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Update</button>\\n      <button (click)=\\\"modalRef.hide()\\\" class=\\\"btn btn-danger\\\" type=\\\"button\\\">Cancel</button>\\n    </div>\\n  </ng-template>\\n\\n  <br/>\\n    <p style=\\\"text-align: center\\\">\\n      <input (click)=\\\"backToCart()\\\" class=\\\" btn btn-secondary\\\" style=\\\"margin: 40px\\\" type=\\\"button\\\" value=\\\"Back to Cart\\\">\\n      <input (click)=\\\"placeOrder()\\\" class=\\\" btn btn-primary\\\" style=\\\"margin: 20px\\\" type=\\\"button\\\" value=\\\"Placer Order\\\">\\n    </p>\\n</div>\\n\"","import {City} from '../../city/model/city';\nimport {State} from '../../state/model/state';\nimport {Country} from '../../country/model/country';\nimport {AddressType} from '../../address-type/model/address-type';\nimport {Cart} from './cart';\n\nexport class CartShippingAddress\n{\n  id: number;\n  streetName: string;\n  apartment: string;\n  city: City;\n  state: State;\n  country: Country;\n  zipCode: string;\n  addressType: AddressType;\n  cart: Cart;\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CheckoutComponent} from './checkout.component';\nimport {UserAuthGuard} from '../../guards/user-auth.guard';\n\n\nexport const checkManagementRoute: Routes=[\n  {\n    path: '',\n    component: CheckoutComponent,\n    canActivate: [UserAuthGuard]\n  }\n];\n@NgModule(\n  {\n    imports: [\n      RouterModule.forChild(checkManagementRoute),\n    ],\n    exports: [\n      RouterModule\n    ]\n  })\nexport class CheckoutRoutingModule\n{\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9jaGVja291dC9jaGVja291dC5jb21wb25lbnQuY3NzIn0= */\"","import {Component, OnInit, TemplateRef} from '@angular/core';\nimport {\n  ADDRESS_API_URL,\n  ADDRESS_TYPE_API_URL,\n  CART_ADDRESS_API_URL,\n  CART_API_URL,\n  CITY_API_URL,\n  COUNTRY_API_URL,\n  ORDER_API_URL,\n  STATE_API_URL,\n  TAX_RATE_API_URL,\n  USER_PROFILE_API_URL\n} from '../../app.constants';\nimport {CartService} from '../cart/service/cart.service';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {AuthService} from '../../core/auth/auth.service';\nimport {Router} from '@angular/router';\nimport {Cart} from '../cart/model/cart';\nimport {CartProduct} from '../cart/model/cart-product';\nimport {UserProfileService} from '../../account/user-profile/service/user-profile.service';\nimport {Address} from '../address/model/address';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {CityService} from '../city/services/city.service';\nimport {StateService} from '../state/services/state.service';\nimport {CountryService} from '../country/services/country.service';\nimport {AddressTypeService} from '../address-type/service/address-type.service';\nimport {AddressService} from '../address/service/address.service';\nimport {AddressType} from '../address-type/model/address-type';\nimport {Country} from '../country/model/country';\nimport {State} from '../state/model/state';\nimport {City} from '../city/model/city';\nimport {BsModalRef, BsModalService} from 'ngx-bootstrap';\nimport {CartShippingAddress} from '../cart/model/cart-shipping-address';\nimport {environment} from '../../../environments/environment';\n\n@Component( {\nselector: 'app-checkout',\ntemplateUrl: './checkout.component.html',\nstyleUrls: ['./checkout.component.css']\n} )\n\nexport class CheckoutComponent implements OnInit\n{\n  cart: Cart;\n  addresses: Array<Address>;\n  addressTypes: Array<AddressType>;\n  countries: Array<Country>;\n  states: Array<State>;\n  cities: Array<City>;\n  cartProducts: Array<CartProduct>;\n  totalCost:number;\n  taxRate=0;\n  taxAmount=0;\n  displayAddressDialog = false;\n  modalRef: BsModalRef;\n  selectedShippingAddress: Address;\n  selectedBillingAddress: Address;\n\n  addressForm=new FormGroup(\n    {\n      addressType: new FormControl( '' ),\n      id: new FormControl( '' ),\n      streetName: new FormControl( '' ),\n      apartment: new FormControl( '' ),\n      city: new FormControl( '' ),\n      state: new FormControl( '' ),\n      country: new FormControl( '' ),\n      zipCode: new FormControl( '' ),\n    } );\n\n  constructor(private cartService:CartService,\n              private ngxSpinnerService:NgxSpinnerService,\n              private authService:AuthService,\n              private userProfileService:UserProfileService,\n              private cityService:CityService,\n              private stateService:StateService,\n              private countryService:CountryService,\n              private addressTypeService:AddressTypeService,\n              private addressService:AddressService,\n              private router:Router,\n              private modalService: BsModalService)\n  {\n  }\n\n  ngOnInit()\n  {\n      this.getMyCart();\n      this.loadAddressTypes();\n      this.loadCountries();\n  }\n\n  openModal(template: TemplateRef<any>, address: Address)\n  {\n    this.modalRef = this.modalService.show(template);\n    if(address!=null)\n    {\n      this.addressForm.patchValue(\n        {\n          addressType: address.addressType,\n          id: address.id,\n          streetName: address.streetName,\n          apartment: address.apartment,\n          city: address.city,\n          state: address.state,\n          country: address.country,\n          zipCode: address.zipCode,\n        }\n      );\n      this.loadStates();\n      this.loadCities();\n    }\n    else\n    {\n      this.addressForm.reset();\n    }\n  }\n\n  private getMyCart()\n  {\n    this.ngxSpinnerService.show();\n    const cartUrl=environment.SERVER_URL+CART_API_URL+'find/user/'+this.authService.currentUserValue.id;\n    this.cartService.getMyCart( cartUrl ).subscribe(\n      data =>\n      {\n        localStorage.setItem( 'currentCart', JSON.stringify( data ) );\n        this.cartService.currentCartSubject.next( data );\n        this.cart=data;\n        if(data.cartProducts!==null)\n        {\n          this.cartProducts=data.cartProducts;\n        }\n        this.calculateTotalCost(this.cartProducts);\n        //this.checkAndHoldInventory();\n        this.getAddresses();\n\n        this.ngxSpinnerService.hide();\n      }\n    );\n  }\n\n  private createOrder()\n  {\n\n  }\n\n  private calculateTotalCost(cartProducts: Array<CartProduct>)\n  {\n    let totalCost=0;\n    cartProducts.forEach(function(cartproduct)\n                         {\n                           totalCost+=cartproduct.quantity*cartproduct.product.price.amount;\n                         });\n    if(this.taxRate !== 0)\n    {\n      this.taxAmount=totalCost*this.taxRate;\n    }\n    this.totalCost=totalCost+this.taxAmount;\n  }\n\n  private checkAndHoldInventory()\n  {\n\n  }\n\n  private getAddresses()\n  {\n    let userProfileId=this.authService.currentUserSubject.value.userProfile.id;\n    let userProfileUrl=environment.SERVER_URL+USER_PROFILE_API_URL+userProfileId;\n    this.userProfileService.getUserProfile(userProfileUrl).subscribe(\n      data=>\n      {\n        this.addresses=data.addresses;\n      },\n      error1 =>\n      {\n        console.log('Failed to get User Profile information. Error: '+error1);\n      }\n    );\n  }\n\n  async changeShippingAddress(address: Address)\n  {\n    this.ngxSpinnerService.show();\n\n    this.selectedShippingAddress=address;\n    let cartShippingAddressUrl=environment.SERVER_URL+CART_ADDRESS_API_URL+'add/shipping_address';\n    let cartShippingAddress=new CartShippingAddress();\n    cartShippingAddress.addressType=address.addressType;\n    cartShippingAddress.streetName=address.streetName;\n    cartShippingAddress.apartment=address.apartment;\n    cartShippingAddress.city=address.city;\n    cartShippingAddress.state=address.state;\n    cartShippingAddress.country=address.country;\n    cartShippingAddress.zipCode=address.zipCode;\n\n    await this.cartService.changeShippingAddress(cartShippingAddressUrl,cartShippingAddress);\n    await this.getTaxRate(address.state.id);\n    this.calculateTotalCost(this.cartProducts);\n\n    this.ngxSpinnerService.hide();\n  }\n\n  async getTaxRate(id: number)\n  {\n    let taxRateUrl=environment.SERVER_URL+TAX_RATE_API_URL+'find/state/'+id;\n    let taxRateObject=await this.cartService.getTaxRate(taxRateUrl);\n    this.taxRate=taxRateObject.rate;\n  }\n\n  async changeBillingAddress(address: Address)\n  {\n    this.ngxSpinnerService.show();\n\n    this.selectedBillingAddress=address;\n    let cartBillingAddressUrl=environment.SERVER_URL+CART_ADDRESS_API_URL+'add/billing_address';\n    let cartBillingAddress=new CartShippingAddress();\n    cartBillingAddress.addressType=address.addressType;\n    cartBillingAddress.streetName=address.streetName;\n    cartBillingAddress.apartment=address.apartment;\n    cartBillingAddress.city=address.city;\n    cartBillingAddress.state=address.state;\n    cartBillingAddress.country=address.country;\n    cartBillingAddress.zipCode=address.zipCode;\n\n    await this.cartService.changeBillingAddress(cartBillingAddressUrl,cartBillingAddress);\n    this.ngxSpinnerService.hide();\n  }\n\n  hideNewAddressDialog()\n  {\n    this.displayAddressDialog=false;\n  }\n\n\n  updateUserAddress()\n  {\n    const addressApiUrl=environment.SERVER_URL+ADDRESS_API_URL+'update';\n    this.addressService.updateAddress(addressApiUrl,this.addressForm.value).subscribe(\n      data=>\n      {\n        this.getAddresses();\n        this.modalRef.hide();\n      },\n      error1 =>\n      {\n        console.log('Failed to updated address. Error: '+error1);\n      }\n    );\n  }\n\n  deleteAddress(address: Address)\n  {\n    if(confirm('Are you sure you want to delete the Address?'))\n    {\n      let addressUrl=environment.SERVER_URL+ADDRESS_API_URL+'delete/'+address.id;\n\n      this.addressService.deleteAddress(addressUrl).subscribe(\n        data=>\n        {\n          this.getAddresses();\n          this.hideNewAddressDialog();\n        },\n        error1 =>\n        {\n          console.log('Error occurred: '+error1);\n        }\n      );\n    }\n  }\n\n  placeOrder()\n  {\n    this.ngxSpinnerService.show();\n    let createOrderUrl=environment.SERVER_URL+ORDER_API_URL+'create';\n\n    this.cartService.createOrder(createOrderUrl,this.cart.id).subscribe(\n      data=>\n      {\n        this.router.navigate(['/order']);\n      },\n      error1 =>\n      {\n        console.log('Failed to create order');\n      }\n    );\n  }\n\n  private loadAddressTypes()\n  {\n    const url=environment.SERVER_URL+ADDRESS_TYPE_API_URL+'list';\n    this.addressTypeService.getAddressTypes(url).subscribe(\n      addressTypes =>\n      {\n        this.addressTypes=addressTypes;\n        this.addressForm.patchValue(\n          {\n            addressTypes: addressTypes\n          }\n        );\n        console.log('Successfully loaded Address types');\n      },\n      error1 =>\n      {\n        console.log('Failed to load mAddress types');\n      }\n    );\n  }\n\n  private loadCountries()\n  {\n    const url=environment.SERVER_URL+COUNTRY_API_URL+'list';\n    this.countryService.getCountries(url).subscribe(\n      countries => {\n        this.countries=countries;\n      },\n      error1 =>\n      {\n\n      }\n    );\n  }\n\n  loadStates()\n  {\n    const country=this.addressForm.value.country;\n    const url=environment.SERVER_URL+STATE_API_URL+'find/country/'+country.id;\n\n    this.stateService.getStatesByCountryId(url).subscribe(\n      data=>\n      {\n        this.states=data;\n      },\n      error1 => {\n        console.log('Failed to load states');\n      }\n    );\n\n  }\n\n  loadCities()\n  {\n    const state=this.addressForm.value.state;\n    const url=environment.SERVER_URL+CITY_API_URL+'find/state/'+state.id;\n\n    this.cityService.getCitiesByStateId(url).subscribe(\n      data=>\n      {\n        this.cities=data;\n      },\n      error1 => {\n        console.log('Failed to load cities');\n      }\n    );\n  }\n\n\n  cartDataAvailable()\n  {\n    return this.cart!==undefined && this.cart !== null && this.cartProducts.length>=0;\n  }\n\n  addressesAvailable()\n  {\n    return this.addresses!==undefined && this.addresses !== null && this.addresses.length>=0;\n  }\n\n  compareAddressTypeFn(c1: AddressType, c2: AddressType): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCountryFn(c1: Country, c2: Country): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareStateFn(c1: State, c2: State): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCityFn(c1: City, c2: City): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  backToCart()\n  {\n    this.router.navigate(['/cart']);\n  }\n\n\n}\n","import {NgModule} from '@angular/core';\nimport {CheckoutComponent} from './checkout.component';\nimport {CheckoutRoutingModule} from './checkout-routing.module';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NgxSpinnerModule} from 'ngx-spinner';\nimport {ButtonModule, DialogModule, PanelModule} from 'primeng/primeng';\nimport {ModalModule} from 'ngx-bootstrap';\n\n@NgModule({\n  declarations:\n    [\n      CheckoutComponent\n    ],\n  imports:\n    [\n      CommonModule,\n      ReactiveFormsModule,\n      NgxSpinnerModule,\n      RouterModule,\n      CheckoutRoutingModule,\n      PanelModule,\n      DialogModule,\n      ButtonModule,\n      FormsModule,\n      ModalModule.forRoot()\n    ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class CheckoutModule\n{\n  \n}\n\n\n"],"sourceRoot":""}