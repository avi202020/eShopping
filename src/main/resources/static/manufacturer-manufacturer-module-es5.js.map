{"version":3,"sources":["./src/app/api/manufacturer/manufacturer-delete/manufacturer-delete.component.html","./src/app/api/manufacturer/manufacturer-edit/manufacturer-edit.component.html","./src/app/api/manufacturer/manufacturer-home/manufacturer-home.component.html","./src/app/api/manufacturer/manufacturer-list/manufacturer-list.component.html","./src/app/api/manufacturer/manufacturer-new/manufacturer-new.component.html","./src/app/api/manufacturer/manufacturer-view/manufacturer-view.component.html","./src/app/api/manufacturer/manufacturer.component.html","./src/app/api/address-type/service/address-type.service.ts","./src/app/api/address/service/address.service.ts","./src/app/api/city/services/city.service.ts","./src/app/api/country/services/country.service.ts","./src/app/api/manufacturer/manufacturer-delete/manufacturer-delete.component.css","./src/app/api/manufacturer/manufacturer-delete/manufacturer-delete.component.ts","./src/app/api/manufacturer/manufacturer-edit/manufacturer-edit.component.css","./src/app/api/manufacturer/manufacturer-edit/manufacturer-edit.component.ts","./src/app/api/manufacturer/manufacturer-home/manufacturer-home.component.css","./src/app/api/manufacturer/manufacturer-home/manufacturer-home.component.ts","./src/app/api/manufacturer/manufacturer-list/manufacturer-list.component.css","./src/app/api/manufacturer/manufacturer-list/manufacturer-list.component.ts","./src/app/api/manufacturer/manufacturer-new/manufacturer-new.component.css","./src/app/api/manufacturer/manufacturer-new/manufacturer-new.component.ts","./src/app/api/manufacturer/manufacturer-routing.module.ts","./src/app/api/manufacturer/manufacturer-view/manufacturer-view.component.css","./src/app/api/manufacturer/manufacturer-view/manufacturer-view.component.ts","./src/app/api/manufacturer/manufacturer.component.css","./src/app/api/manufacturer/manufacturer.component.ts","./src/app/api/manufacturer/manufacturer.module.ts","./src/app/api/manufacturer/model/manufacturer-address.ts","./src/app/api/manufacturer/model/manufacturer.ts","./src/app/api/manufacturer/service/manufacturer.service.ts","./src/app/api/state/services/state.service.ts"],"names":[],"mappings":"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","file":"manufacturer-manufacturer-module-es5.js","sourcesContent":["module.exports = \"<p>\\n  manufacturer-delete works!\\n</p>\\n\"","module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div>\\n  <h2>Edit Manufacturer</h2>\\n\\n  <br/>\\n  <form  [formGroup]=\\\"manufacturerForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"id\\\">Manufacturer Id</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"id\\\" formControlName=\\\"id\\\">\\n      <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">Automatically generated by system</small>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"name\\\" formControlName=\\\"name\\\" required placeholder=\\\"Enter manufacturer name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"displayName\\\">Display Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"displayName\\\" formControlName=\\\"displayName\\\" required placeholder=\\\"Display Name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"description\\\">Description</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"description\\\" formControlName=\\\"description\\\" required placeholder=\\\"Enter description\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\">Phone</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\" placeholder=\\\"Enter phone\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"contactEmail\\\">Contact Email</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactEmail\\\" id=\\\"contactEmail\\\" placeholder=\\\"Enter contact email\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"fax\\\">Fax</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"fax\\\" id=\\\"fax\\\" placeholder=\\\"Enter fax details\\\" required>\\n    </div>\\n\\n    <div formGroupName=\\\"manufacturerAddress\\\">\\n      <h3>Address</h3>\\n      <div class=\\\"form-group\\\">\\n        <label>Address Type\\n          <select [compareWith]=\\\"compareAddressTypeFn\\\" class=\\\"form-control\\\" name=\\\"manufacturerAddressType\\\" formControlName=\\\"manufacturerAddressType\\\">\\n            <option  [ngValue]=\\\"manufacturerAddressType\\\" *ngFor=\\\"let manufacturerAddressType of manufacturerAddressTypes\\\">\\n              {{manufacturerAddressType.type}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"streetName\\\">Street Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"streetName\\\" id=\\\"streetName\\\" placeholder=\\\"Enter Street Name\\\" required>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"apartment\\\">Apartment</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"apartment\\\" id=\\\"apartment\\\" placeholder=\\\"Enter Apartment Number\\\" required>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label>Country\\n          <select  [compareWith]=\\\"compareCountryFn\\\"  class=\\\"form-control\\\" name=\\\"country\\\" formControlName=\\\"country\\\"  (change)=\\\"loadStates()\\\">\\n            <option  [ngValue]=\\\"country\\\" *ngFor=\\\"let country of countries\\\">\\n              {{country.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label>State\\n          <select  [compareWith]=\\\"compareStateFn\\\"  class=\\\"form-control\\\" name=\\\"state\\\" formControlName=\\\"state\\\"  (change)=\\\"loadCities()\\\">\\n            <option  [ngValue]=\\\"state\\\" *ngFor=\\\"let state of states\\\">\\n              {{state.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label>City\\n          <select  [compareWith]=\\\"compareCityFn\\\"  class=\\\"form-control\\\" name=\\\"city\\\" formControlName=\\\"city\\\">\\n            <option  [ngValue]=\\\"city\\\" *ngFor=\\\"let city of cities\\\">\\n              {{city.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"zipCode\\\">Zip Code</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"zipCode\\\" id=\\\"zipCode\\\" placeholder=\\\"Enter Zip Code\\\" required>\\n      </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  (click)=\\\"updateManufacturer()\\\">Update</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"  style=\\\"margin-left: 30px\\\" (click)=\\\"goBack()\\\">Cancel</button>\\n\\n  </form>\\n\\n</div>\\n\"","module.exports = \"<h1> Manufacturers List </h1>\\n\\n<ul class=\\\"list-group\\\">\\n  <li class=\\\"list-group-item\\\"><a routerLink=\\\"list\\\" routerLinkActive=\\\"active\\\">All Manufacturers</a></li>\\n  <li class=\\\"list-group-item\\\"><a routerLink=\\\"new\\\" routerLinkActive=\\\"active\\\">Create New Manufacturer</a></li>\\n  <li class=\\\"list-group-item\\\"><a routerLink=\\\"update\\\" routerLinkActive=\\\"active\\\">Update Manufacturer</a></li>\\n  <li class=\\\"list-group-item\\\"><a routerLink=\\\"delete\\\" routerLinkActive=\\\"active\\\">Delete Manufacturer</a></li>\\n</ul>\\n\"","module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div class=\\\"container container-fluid\\\">\\n  <h3 style=\\\"text-align: center\\\" > Manufacturer List</h3>\\n  <div *ngIf=\\\"manufacturerDataAvailable()\\\">\\n    <table class=\\\"table table-bordered\\\">\\n      <tr style=\\\"text-align: center\\\" >\\n        <th> Manufacturer Id</th>\\n        <th>Name</th>\\n        <th>Contact Email</th>\\n        <th>Phone</th>\\n        <th>Fax</th>\\n        <th>Business Address</th>\\n      </tr>\\n\\n      <tr *ngFor=\\\"let manufacturer of (manufacturers)\\\" style=\\\"text-align: center\\\">\\n        <td>{{manufacturer.id}}</td>\\n        <td><a [routerLink]=\\\"['/manufacturer', manufacturer.id]\\\">{{manufacturer.name}}</a></td>\\n        <td>{{manufacturer.contactEmail}}</td>\\n        <td>{{manufacturer.phone}}</td>\\n        <td>{{manufacturer.fax}}</td>\\n        <td> {{manufacturer.manufacturerAddress.streetName}}{{manufacturer.manufacturerAddress.apartment}} <br/>{{manufacturer.manufacturerAddress.city.name}},{{manufacturer.manufacturerAddress.state.name}},{{manufacturer.manufacturerAddress.country.name}},{{manufacturer.manufacturerAddress.zipCode}},\\n        </td>\\n\\n      </tr>\\n    </table>\\n\\n    <div style=\\\"text-align: center\\\">\\n      <a [routerLink]=\\\"['/manufacturer']\\\" style=\\\"margin-right: 30px\\\">Back</a>\\n      <a [routerLink]=\\\"['/manufacturer/new']\\\" style=\\\"margin-right: 30px\\\">Create New</a>\\n    </div>\\n  </div>\\n\\n</div>\\n\"","module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div>\\n  <h2>Create New Manufacturer</h2>\\n\\n  <br/>\\n  <form  [formGroup]=\\\"manufacturerForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"id\\\">Manufacturer Id</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"id\\\" formControlName=\\\"id\\\">\\n      <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">Automatically generated by system</small>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"name\\\" formControlName=\\\"name\\\" required placeholder=\\\"Enter manufacturer name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Display Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"displayName\\\" formControlName=\\\"displayName\\\" required placeholder=\\\"Display Name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"description\\\">Description</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"description\\\" formControlName=\\\"description\\\" required placeholder=\\\"Enter description\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\">Phone</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\" placeholder=\\\"Enter phone\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"contactEmail\\\">Contact Email</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactEmail\\\" id=\\\"contactEmail\\\" placeholder=\\\"Enter contact email\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"fax\\\">Fax</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"fax\\\" id=\\\"fax\\\" placeholder=\\\"Enter fax details\\\" required>\\n    </div>\\n\\n    <div formGroupName=\\\"manufacturerAddress\\\">\\n      <h3>Address</h3>\\n      <div class=\\\"form-group\\\">\\n        <label>Address Type\\n          <select class=\\\"form-control\\\" name=\\\"manufacturerAddressType\\\" formControlName=\\\"manufacturerAddressType\\\">\\n            <option  [ngValue]=\\\"manufacturerAddressType\\\" *ngFor=\\\"let manufacturerAddressType of manufacturerAddressTypes\\\" [defaultSelected]=\\\"true\\\">\\n              {{manufacturerAddressType.type}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"streetName\\\">Street Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"streetName\\\" id=\\\"streetName\\\" placeholder=\\\"Enter Street Name\\\" required>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"apartment\\\">Apartment</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"apartment\\\" id=\\\"apartment\\\" placeholder=\\\"Enter Apartment Number\\\" required>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label>Country\\n          <select class=\\\"form-control\\\" name=\\\"country\\\" formControlName=\\\"country\\\"  (change)=\\\"loadStates()\\\">\\n            <option  [ngValue]=\\\"country\\\" *ngFor=\\\"let country of countries\\\" [defaultSelected]=\\\"true\\\">\\n              {{country.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label>State\\n          <select class=\\\"form-control\\\" name=\\\"state\\\" formControlName=\\\"state\\\"  (change)=\\\"loadCities()\\\">\\n            <option  [ngValue]=\\\"state\\\" *ngFor=\\\"let state of states\\\" [defaultSelected]=\\\"false\\\">\\n              {{state.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label>City\\n          <select class=\\\"form-control\\\" name=\\\"city\\\" formControlName=\\\"city\\\">\\n            <option  [ngValue]=\\\"city\\\" *ngFor=\\\"let city of cities\\\" [defaultSelected]=\\\"false\\\">\\n              {{city.name}}\\n            </option>\\n          </select>\\n        </label>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"zipCode\\\">Zip Code</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"zipCode\\\" id=\\\"zipCode\\\" placeholder=\\\"Enter Zip Code\\\" required>\\n      </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  (click)=\\\"createManufacturer()\\\">Submit</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"  style=\\\"margin-left: 30px\\\" (click)=\\\"goBack()\\\">Cancel</button>\\n\\n  </form>\\n\\n</div>\\n\"","module.exports = \"\\n<h2>Manufacturer Information</h2> <br/> <br/>\\n\\n<div *ngIf=\\\"manufacturerDataAvailable()\\\">\\n  <form [formGroup]=\\\"manufacturerForm\\\">\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"id\\\">Id</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"id\\\" id=\\\"id\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"name\\\">Name</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"name\\\" id=\\\"name\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"description\\\">Description</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"description\\\" id=\\\"description\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"phone\\\">Phone</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"contactEmail\\\">Contact Email</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"contactEmail\\\" id=\\\"contactEmail\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"fax\\\">Fax</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" id=\\\"fax\\\" formControlName=\\\"fax\\\"  readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n\\n      <h3>Address</h3>\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"manufacturerAddress\\\">Address</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <input class=\\\"form-control-plaintext\\\" formControlName=\\\"manufacturerAddress\\\"  id=\\\"manufacturerAddress\\\" readonly type=\\\"text\\\">\\n        </div>\\n\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label class=\\\"col-sm-2 col-form-label\\\" for=\\\"products\\\">Products</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control-plaintext\\\" formControlName=\\\"products\\\"  id=\\\"products\\\" readonly type=\\\"text\\\">\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\\n\\n<p>\\n  <a [routerLink]=\\\"['/manufacturer/list']\\\" style=\\\"margin-right: 30px\\\">Back </a>\\n  <a [routerLink]=\\\"['./edit']\\\" style=\\\"margin-right: 30px\\\">Edit </a>\\n  <a (click)=\\\"deleteManufacturer()\\\" href=\\\"\\\">Delete </a>\\n</p>\\n\\n\\n\"","module.exports = \"<div>\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {AddressType} from '../model/address-type';\nimport {ManufacturerAddressType} from '../../manufacturer/model/manufacturer-address-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressTypeService\n{\n\n  constructor(private httpClient:HttpClient) { }\n\n\n  getAddressTypes(url: string)\n  {\n     return this.httpClient.get<AddressType[]>(url);\n  }\n  getManufacturerAddressTypes(url: string)\n  {\n    return this.httpClient.get<ManufacturerAddressType[]>(url);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Address} from '../model/address';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressService\n{\n\n  constructor(private httpClient:HttpClient) { }\n\n  getAddresses(url: string)\n  {\n    return this.httpClient.get<Address[]>(url);\n  }\n\n  createAddress(url: string, address: Address)\n  {\n    return this.httpClient.post<Address>(url,address);\n  }\n\n  updateAddress(url: string, address: Address)\n  {\n    return this.httpClient.post<Address>(url,address);\n  }\n\n  deleteAddress(url: string)\n  {\n    return this.httpClient.delete(url);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {City} from '../model/city';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CityService\n{\n  constructor(private httpClient:HttpClient) { }\n\n  getCities(url)\n  {\n    return this.httpClient.get<City[]>(url);\n  }\n\n  getCitiesByStateId(url: string)\n  {\n    return this.httpClient.get<City[]>(url);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Country} from '../model/country';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryService\n{\n  constructor(private httpClient:HttpClient) { }\n\n  getCountries(url)\n  {\n    return this.httpClient.get<Country[]>(url);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLWRlbGV0ZS9tYW51ZmFjdHVyZXItZGVsZXRlLmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-manufacturer-delete',\n  templateUrl: './manufacturer-delete.component.html',\n  styleUrls: ['./manufacturer-delete.component.css']\n})\nexport class ManufacturerDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLWVkaXQvbWFudWZhY3R1cmVyLWVkaXQuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {Country} from '../../country/model/country';\nimport {State} from '../../state/model/state';\nimport {City} from '../../city/model/city';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ManufacturerService} from '../service/manufacturer.service';\nimport {CityService} from '../../city/services/city.service';\nimport {StateService} from '../../state/services/state.service';\nimport {CountryService} from '../../country/services/country.service';\nimport {AddressTypeService} from '../../address-type/service/address-type.service';\nimport {AddressService} from '../../address/service/address.service';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n  CITY_API_URL,\n  COUNTRY_API_URL,\n  MANUFACTURER_ADDRESS_TYPE_API_URL,\n  MANUFACTURER_API_URL,\n  STATE_API_URL\n} from '../../../app.constants';\nimport {Manufacturer} from '../model/manufacturer';\nimport {ManufacturerAddressType} from '../model/manufacturer-address-type';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-manufacturer-edit',\n  templateUrl: './manufacturer-edit.component.html',\n  styleUrls: ['./manufacturer-edit.component.css']\n})\nexport class ManufacturerEditComponent implements OnInit\n{\n  manufacturer: Manufacturer;\n  manufacturerAddressTypes: Array<ManufacturerAddressType>;\n  countries: Array<Country>;\n  states: Array<State>;\n  cities: Array<City>;\n\n  manufacturerForm=new FormGroup(\n    {\n      id: new FormControl( {value: '', disabled: true} ),\n      name: new FormControl( '' ),\n      displayName: new FormControl( '' ),\n      description: new FormControl( '' ),\n      manufacturerAddress: new FormGroup(\n        {\n          manufacturerAddressType: new FormControl( '' ),\n          id: new FormControl( '' ),\n          streetName: new FormControl( '' ),\n          apartment: new FormControl( '' ),\n          city: new FormControl( '' ),\n          state: new FormControl( '' ),\n          country: new FormControl( '' ),\n          zipCode: new FormControl( '' ),\n        }),\n      phone: new FormControl( '' ),\n      contactEmail: new FormControl( '' ),\n      fax: new FormControl( '' ),\n      products: new FormControl( '' ),\n    } );\n\n  constructor(private manufacturerService:ManufacturerService,\n              private cityService:CityService,\n              private stateService:StateService,\n              private countryService:CountryService,\n              private addressTypeService:AddressTypeService,\n              private addressService:AddressService,\n              private spinnerService:NgxSpinnerService,\n              private router: Router,\n              private route:ActivatedRoute)\n  {\n\n  }\n\n  ngOnInit()\n  {\n    this.getManufacturer();\n    this.loadAddressTypes();\n    this.loadCountries();\n  }\n\n  private getManufacturer()\n  {\n    const id=this.route.snapshot.paramMap.get( 'id' );\n    const url=environment.SERVER_URL+MANUFACTURER_API_URL+'find/'+id;\n\n    this.manufacturerService.getManufacturer( url ).pipe()\n        .subscribe(\n          data =>\n          {\n            this.manufacturer=data;\n            this.manufacturerForm.patchValue(\n              {\n                id: data.id,\n                name: data.name,\n                displayName: data.displayName,\n                description: data.description,\n                phone: data.phone,\n                contactEmail: data.contactEmail,\n                fax: data.fax,\n                manufacturerAddress: data.manufacturerAddress,\n                products: data.products,\n              });\n            this.loadStates();\n            this.loadCities();\n          },\n          error =>\n          {\n            console.log( error );\n          },\n          () =>\n          {\n            console.log( 'getManufacturer() success');\n          } );\n\n  }\n\n  updateManufacturer()\n  {\n    this.spinnerService.show();\n\n    const manufacturerUrl=environment.SERVER_URL+MANUFACTURER_API_URL+'update';\n    const id=this.route.snapshot.paramMap.get( 'id' );\n\n    let manufacturer=new Manufacturer();\n    manufacturer.id=Number( id );\n    manufacturer.name=this.manufacturerForm.value.name;\n    manufacturer.displayName=this.manufacturerForm.value.displayName;\n    manufacturer.description=this.manufacturerForm.value.description;\n    manufacturer.phone=this.manufacturerForm.value.phone;\n    manufacturer.contactEmail=this.manufacturerForm.value.contactEmail;\n    manufacturer.fax=this.manufacturerForm.value.fax;\n    manufacturer.manufacturerAddress=this.manufacturerForm.value.manufacturerAddress;\n\n\n    this.manufacturerService.updateManufacturer( manufacturerUrl, manufacturer ).subscribe(\n      data =>\n      {\n        manufacturer=data;\n        console.log( 'Manufacturer updated' );\n        this.router.navigate( ['/manufacturer/list'] );\n      },\n      error1 =>\n      {\n        console.log( 'Manufacturer update failed' );\n        this.spinnerService.hide();\n      }\n    );\n\n  }\n\n  private loadAddressTypes()\n  {\n    const url=environment.SERVER_URL+MANUFACTURER_ADDRESS_TYPE_API_URL+'list';\n    this.addressTypeService.getManufacturerAddressTypes(url).subscribe(\n      manufacturerAddressTypes => {\n        this.manufacturerAddressTypes=manufacturerAddressTypes;\n        this.manufacturerForm.patchValue(\n          {\n            addressType: manufacturerAddressTypes\n          }\n        );\n        console.log('Successfully loaded address types');\n      },\n      error1 =>\n      {\n        console.log('Failed to load address types');\n      }\n    );\n  }\n\n  private loadCountries()\n  {\n    const url=environment.SERVER_URL+COUNTRY_API_URL+'list';\n    this.countryService.getCountries(url).subscribe(\n      countries => {\n        this.countries=countries;\n      },\n      error1 =>\n      {\n\n      }\n    );\n  }\n\n  loadStates()\n  {\n    const country=this.manufacturerForm.value.manufacturerAddress.country;\n    const url=environment.SERVER_URL+STATE_API_URL+'find/country/'+country.id;\n\n    this.stateService.getStatesByCountryId(url).subscribe(\n      data=>\n      {\n        this.states=data;\n      },\n      error1 => {\n        console.log('Failed to load states');\n      }\n    );\n\n  }\n\n  loadCities()\n  {\n    const state=this.manufacturerForm.value.manufacturerAddress.state;\n    const url=environment.SERVER_URL+CITY_API_URL+'find/state/'+state.id;\n\n    this.cityService.getCitiesByStateId(url).subscribe(\n      data=>\n      {\n        this.cities=data;\n      },\n      error1 => {\n        console.log('Failed to load cities');\n      }\n    );\n  }\n\n  compareAddressTypeFn(c1: ManufacturerAddressType, c2: ManufacturerAddressType): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCountryFn(c1: Country, c2: Country): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareStateFn(c1: State, c2: State): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCityFn(c1: City, c2: City): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  goBack()\n  {\n    this.router.navigate(['/manufacturer']);\n  }\n\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLWhvbWUvbWFudWZhY3R1cmVyLWhvbWUuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-manufacturer-home',\n  templateUrl: './manufacturer-home.component.html',\n  styleUrls: ['./manufacturer-home.component.css']\n})\nexport class ManufacturerHomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLWxpc3QvbWFudWZhY3R1cmVyLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {ManufacturerService} from '../service/manufacturer.service';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {MANUFACTURER_API_URL} from '../../../app.constants';\nimport {Manufacturer} from '../model/manufacturer';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-manufacturer-list',\n  templateUrl: './manufacturer-list.component.html',\n  styleUrls: ['./manufacturer-list.component.css']\n})\nexport class ManufacturerListComponent implements OnInit\n{\n  manufacturers: Array<Manufacturer>;\n\n  constructor(private manufacturerService:ManufacturerService, private spinner: NgxSpinnerService) { }\n\n  ngOnInit()\n  {\n    this.getManufacturers();\n  }\n\n  private getManufacturers()\n  {\n    let url=environment.SERVER_URL+MANUFACTURER_API_URL+'list';\n    this.spinner.show();\n\n    this.manufacturerService.getManufacturers(url).subscribe(\n      manufacturers =>\n      {\n        this.manufacturers=manufacturers;\n        this.spinner.hide();\n      },\n\n      error1 =>\n      {\n        console.log('Failed to load manufacturers');\n        this.spinner.hide();\n      },\n    () =>\n    {\n      this.spinner.hide();\n    } );\n  }\n\n  manufacturerDataAvailable(): boolean\n  {\n    return this.manufacturers!==undefined;\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLW5ldy9tYW51ZmFjdHVyZXItbmV3LmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\nimport {ManufacturerService} from '../service/manufacturer.service';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {\n  CITY_API_URL,\n  COUNTRY_API_URL,\n  MANUFACTURER_ADDRESS_TYPE_API_URL,\n  MANUFACTURER_API_URL,\n  STATE_API_URL\n} from '../../../app.constants';\nimport {Router} from '@angular/router';\nimport {CountryService} from '../../country/services/country.service';\nimport {AddressTypeService} from '../../address-type/service/address-type.service';\nimport {Country} from '../../country/model/country';\nimport {StateService} from '../../state/services/state.service';\nimport {State} from '../../state/model/state';\nimport {CityService} from '../../city/services/city.service';\nimport {City} from '../../city/model/city';\nimport {Manufacturer} from '../model/manufacturer';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {AddressService} from '../../address/service/address.service';\nimport {ManufacturerAddressType} from '../model/manufacturer-address-type';\nimport {ManufacturerAddress} from '../model/manufacturer-address';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-manufacturer-new',\n  templateUrl: './manufacturer-new.component.html',\n  styleUrls: ['./manufacturer-new.component.css']\n})\nexport class ManufacturerNewComponent implements OnInit\n{\n  manufacturerAddressTypes: Array<ManufacturerAddressType>;\n  countries: Array<Country>;\n  states: Array<State>;\n  cities: Array<City>;\n\n  manufacturerForm=new FormGroup(\n    {\n      id: new FormControl( {value: '', disabled: true} ),\n      name: new FormControl( '' ),\n      displayName: new FormControl( '' ),\n      description: new FormControl( '' ),\n      manufacturerAddress: new FormGroup(\n        {\n                  manufacturerAddressType: new FormControl( '' ),\n                  streetName: new FormControl( '' ),\n                  apartment: new FormControl( '' ),\n                  city: new FormControl( '' ),\n                  state: new FormControl( '' ),\n                  country: new FormControl( '' ),\n                  zipCode: new FormControl( '' ),\n                 }),\n      phone: new FormControl( '' ),\n      contactEmail: new FormControl( '' ),\n      fax: new FormControl( '' ),\n      products: new FormControl( '' ),\n    } );\n\n  constructor(private manufacturerService:ManufacturerService,\n              private cityService:CityService,\n              private stateService:StateService,\n              private countryService:CountryService,\n              private addressTypeService:AddressTypeService,\n              private addressService:AddressService,\n              private spinnerService:NgxSpinnerService,\n              private router: Router)\n  {\n\n  }\n\n  ngOnInit()\n  {\n    this.loadAddressTypes();\n    this.loadCountries();\n  }\n\n  createManufacturer()\n  {\n    this.spinnerService.show();\n    const manufactureUrl=environment.SERVER_URL+MANUFACTURER_API_URL+'create';\n\n    let manufacturerAddress=new ManufacturerAddress();\n    manufacturerAddress.manufacturerAddressType=this.manufacturerForm.value.manufacturerAddress.manufacturerAddressType;\n    manufacturerAddress.streetName=this.manufacturerForm.value.manufacturerAddress.streetName;\n    manufacturerAddress.apartment=this.manufacturerForm.value.manufacturerAddress.apartment;\n    manufacturerAddress.city=this.manufacturerForm.value.manufacturerAddress.city;\n    manufacturerAddress.state=this.manufacturerForm.value.manufacturerAddress.state;\n    manufacturerAddress.country=this.manufacturerForm.value.manufacturerAddress.country;\n    manufacturerAddress.zipCode=this.manufacturerForm.value.manufacturerAddress.zipCode;\n\n    let manufacturer=new Manufacturer();\n    manufacturer.name=this.manufacturerForm.value.name;\n    manufacturer.displayName=this.manufacturerForm.value.displayName;\n    manufacturer.description=this.manufacturerForm.value.description;\n    manufacturer.phone=this.manufacturerForm.value.phone;\n    manufacturer.contactEmail=this.manufacturerForm.value.contactEmail;\n    manufacturer.fax=this.manufacturerForm.value.fax;\n    manufacturer.manufacturerAddress=manufacturerAddress;\n\n\n    this.manufacturerService.createManufacturer(manufactureUrl,manufacturer).subscribe(\n      data=>\n      {\n        manufacturer=data;\n        console.log('Manufacturer created');\n        this.router.navigate(['/manufacturer/list']);\n      },\n      error1 => {\n        console.log('Manufacturer creation failed');\n        this.spinnerService.hide();\n      }\n    );\n\n  }\n\n\n\n  private loadAddressTypes()\n  {\n    const url=environment.SERVER_URL+MANUFACTURER_ADDRESS_TYPE_API_URL+'list';\n    this.addressTypeService.getManufacturerAddressTypes(url).subscribe(\n      manufacturerAddressTypes =>\n      {\n        this.manufacturerAddressTypes=manufacturerAddressTypes;\n        this.manufacturerForm.patchValue(\n          {\n            manufacturerAddressType: manufacturerAddressTypes\n          }\n        );\n        console.log('Successfully loaded manufacturerAddress types');\n      },\n      error1 =>\n      {\n        console.log('Failed to load manufacturerAddress types');\n      }\n    );\n  }\n\n  private loadCountries()\n  {\n    const url=environment.SERVER_URL+COUNTRY_API_URL+'list';\n    this.countryService.getCountries(url).subscribe(\n      countries => {\n        this.countries=countries;\n      },\n      error1 =>\n      {\n\n      }\n    );\n  }\n\n  loadStates()\n  {\n    const country=this.manufacturerForm.value.manufacturerAddress.country;\n    const url=environment.SERVER_URL+STATE_API_URL+'find/country/'+country.id;\n\n    this.stateService.getStatesByCountryId(url).subscribe(\n      data=>\n      {\n        this.states=data;\n      },\n      error1 => {\n        console.log('Failed to load states');\n      }\n    );\n\n  }\n\n  loadCities()\n  {\n    const state=this.manufacturerForm.value.manufacturerAddress.state;\n    const url=environment.SERVER_URL+CITY_API_URL+'find/state/'+state.id;\n\n    this.cityService.getCitiesByStateId(url).subscribe(\n      data=>\n      {\n        this.cities=data;\n      },\n      error1 => {\n        console.log('Failed to load cities');\n      }\n    );\n  }\n\n  goBack()\n  {\n    this.router.navigate(['/manufacturer']);\n  }\n\n\n\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {UserAuthGuard} from '../../guards/user-auth.guard';\nimport {ManufacturerListComponent} from './manufacturer-list/manufacturer-list.component';\nimport {ManufacturerNewComponent} from './manufacturer-new/manufacturer-new.component';\nimport {ManufacturerEditComponent} from './manufacturer-edit/manufacturer-edit.component';\nimport {ManufacturerDeleteComponent} from './manufacturer-delete/manufacturer-delete.component';\nimport {ManufacturerViewComponent} from './manufacturer-view/manufacturer-view.component';\nimport {ManufacturerHomeComponent} from './manufacturer-home/manufacturer-home.component';\nimport {NgModule} from '@angular/core';\n\n\nexport const manufacturerManagementRoute: Routes=[\n  {\n    path: '',\n    component: ManufacturerHomeComponent,\n    canActivate: [UserAuthGuard]\n  },\n  {\n    path: 'list',\n    component: ManufacturerListComponent,\n    canActivate: [UserAuthGuard]\n  },\n  {\n    path: 'new',\n    component: ManufacturerNewComponent,\n    canActivate: [UserAuthGuard]\n  },\n  {\n    path: ':id',\n    component: ManufacturerViewComponent,\n    canActivate: [UserAuthGuard]\n  },\n  {\n    path: ':id/edit',\n    component: ManufacturerEditComponent,\n    canActivate: [UserAuthGuard]\n  },\n  {\n    path: ':id/delete',\n    component: ManufacturerDeleteComponent,\n    canActivate: [UserAuthGuard]\n  }\n  ];\n\n@NgModule(\n  {\n    imports: [\n      RouterModule.forChild(manufacturerManagementRoute),\n    ],\n    exports: [\n      RouterModule\n    ]\n  })\nexport class ManufacturerRoutingModule\n{\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLXZpZXcvbWFudWZhY3R1cmVyLXZpZXcuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {ManufacturerService} from '../service/manufacturer.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Manufacturer} from '../model/manufacturer';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {MANUFACTURER_API_URL} from '../../../app.constants';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-manufacturer-view',\n  templateUrl: './manufacturer-view.component.html',\n  styleUrls: ['./manufacturer-view.component.css']\n})\nexport class ManufacturerViewComponent implements OnInit\n{\n  manufacturer: Manufacturer;\n\n  manufacturerForm=new FormGroup(\n    {\n                id: new FormControl( {value: '', disabled: true} ),\n                name: new FormControl( '' ),\n                displayName: new FormControl( '' ),\n                description: new FormControl( '' ),\n                manufacturerAddress: new FormControl(''),\n                contactEmail: new FormControl( '' ),\n                phone: new FormControl( '' ),\n                fax: new FormControl( '' ),\n                products: new FormControl( '' ),\n             } );\n\n  constructor(private manufacturerService:ManufacturerService,\n              private spinner:NgxSpinnerService,\n              private route:ActivatedRoute,\n              private router:Router) { }\n\n  ngOnInit()\n  {\n    this.getManufacturer();\n  }\n\n  private getManufacturer()\n  {\n    const id=this.route.snapshot.paramMap.get( 'id' );\n    const url=environment.SERVER_URL+MANUFACTURER_API_URL+'find/'+id;\n\n    this.spinner.show();\n    this.manufacturerService.getManufacturer( url ).pipe()\n        .subscribe(\n          data =>\n          {\n            this.manufacturer=data;\n            this.manufacturerForm.patchValue(\n              {\n                id: data.id,\n                name: data.name,\n                displayName: data.displayName,\n                description: data.description,\n                manufacturerAddress: data.manufacturerAddress.streetName+' '+data.manufacturerAddress.apartment+', '+data.manufacturerAddress.city.name+', '+data.manufacturerAddress.state.name+', '+data.manufacturerAddress.country.name+', '+data.manufacturerAddress.zipCode,\n                contactEmail: data.contactEmail,\n                fax: data.fax,\n                phone: data.phone,\n                products: data.products\n              });\n            this.spinner.hide();\n          },\n          error =>\n          {\n            console.log( error );\n            this.spinner.hide();\n          });\n  }\n\n  manufacturerDataAvailable(): boolean\n  {\n    return this.manufacturer!==undefined;\n  }\n\n  deleteManufacturer()\n  {\n    if(confirm('Are you sure you wanna delete Manufacturer?'))\n    {\n      const id=this.route.snapshot.paramMap.get( 'id' );\n      const url=environment.SERVER_URL+MANUFACTURER_API_URL+'delete/'+id;\n\n      this.manufacturerService.deleteManufacturer(url).subscribe(\n        data=>{\n          console.log('Manufacturer with id: '+id+' deleted');\n          this.router.navigate(['manufacturer/list']);\n        },\n        error1 => {\n          console.log('Failed to delete Manufacturer with id: '+id);\n        }\n      );\n\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwaS9tYW51ZmFjdHVyZXIvbWFudWZhY3R1cmVyLmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-manufacturer',\n  templateUrl: './manufacturer.component.html',\n  styleUrls: ['./manufacturer.component.css']\n})\nexport class ManufacturerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgxSpinnerModule} from 'ngx-spinner';\nimport {RouterModule} from '@angular/router';\nimport {ManufacturerComponent} from './manufacturer.component';\nimport {ManufacturerListComponent} from './manufacturer-list/manufacturer-list.component';\nimport {ManufacturerEditComponent} from './manufacturer-edit/manufacturer-edit.component';\nimport {ManufacturerHomeComponent} from './manufacturer-home/manufacturer-home.component';\nimport {ManufacturerNewComponent} from './manufacturer-new/manufacturer-new.component';\nimport {ManufacturerViewComponent} from './manufacturer-view/manufacturer-view.component';\nimport {ManufacturerDeleteComponent} from './manufacturer-delete/manufacturer-delete.component';\nimport {ManufacturerRoutingModule} from './manufacturer-routing.module';\n\n@NgModule({\n  declarations:\n    [\n      ManufacturerComponent,\n      ManufacturerListComponent,\n      ManufacturerEditComponent,\n      ManufacturerHomeComponent,\n      ManufacturerNewComponent,\n      ManufacturerViewComponent,\n      ManufacturerDeleteComponent,\n    ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgxSpinnerModule,\n    RouterModule,\n    ManufacturerRoutingModule,\n  ],\n  exports:\n    [\n      RouterModule\n    ]\n} )\nexport class ManufacturerModule { }\n","import {City} from '../../city/model/city';\nimport {State} from '../../state/model/state';\nimport {Country} from '../../country/model/country';\nimport {ManufacturerAddressType} from './manufacturer-address-type';\n\nexport class ManufacturerAddress\n{\n  id: number;\n  streetName: string;\n  apartment: string;\n  city: City;\n  state: State;\n  country: Country;\n  zipCode: string;\n  manufacturerAddressType: ManufacturerAddressType;\n}\n","import {Product} from '../../product/model/product';\nimport {ManufacturerAddress} from './manufacturer-address';\n\nexport class Manufacturer\n{\n  id: number;\n  name: string;\n  displayName: string;\n  description: string;\n  manufacturerAddress:ManufacturerAddress;\n  contactEmail:string;\n  phone: string;\n  fax:string;\n  lastModifiedDate:string;\n  products: Array<Product>;\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Manufacturer} from '../model/manufacturer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ManufacturerService\n{\n\n  constructor(private httpClient:HttpClient)\n  {\n  }\n\n  getManufacturer(url: string)\n  {\n    return this.httpClient.get<Manufacturer>( url );\n  }\n\n  getManufacturers(url: string)\n  {\n    return this.httpClient.get<Manufacturer[]>( url );\n  }\n  createManufacturer(url: string, manufacturer: Manufacturer)\n  {\n    return this.httpClient.post<Manufacturer>(url,manufacturer);\n  }\n\n  updateManufacturer(url: string, manufacturer: Manufacturer)\n  {\n    return this.httpClient.put<Manufacturer>( url, manufacturer );\n  }\n\n  deleteManufacturer(url: string)\n  {\n    return this.httpClient.delete( url );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nimport {State} from '../model/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService\n{\n  constructor(private httpClient:HttpClient) { }\n\n  getStates(url)\n  {\n    return this.httpClient.get<State[]>(url);\n  }\n\n  getStatesByCountryId(url)\n  {\n    return this.httpClient.get<State[]>(url);\n  }\n}\n"],"sourceRoot":""}