{"version":3,"sources":["./src/app/account/activate/activate.component.html","./src/app/account/password-reset/password-reset.component.html","./src/app/account/password/password.component.html","./src/app/account/register/register.component.html","./src/app/account/settings/settings.component.html","./src/app/account/user-profile/user-profile-edit/user-profile-edit.component.html","./src/app/account/user-profile/user-profile.component.html","./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/activate/activate.component.css","./src/app/account/activate/activate.component.ts","./src/app/account/password-reset/password-reset.component.css","./src/app/account/password-reset/password-reset.component.ts","./src/app/account/password/password.component.css","./src/app/account/password/password.component.ts","./src/app/account/register/register-user.ts","./src/app/account/register/register.component.css","./src/app/account/register/register.component.ts","./src/app/account/register/register.service.ts","./src/app/account/register/registerform-validator.ts","./src/app/account/settings/settings.component.css","./src/app/account/settings/settings.component.ts","./src/app/account/user-profile/model/user-profile.ts","./src/app/account/user-profile/user-profile-edit/user-profile-edit.component.css","./src/app/account/user-profile/user-profile-edit/user-profile-edit.component.ts","./src/app/account/user-profile/user-profile.component.css","./src/app/account/user-profile/user-profile.component.ts"],"names":[],"mappings":"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","file":"account-account-module-es2015.js","sourcesContent":["module.exports = \"<p>\\n  activate works!\\n</p>\\n\"","module.exports = \"<p>\\n  password-reset works!\\n</p>\\n\"","module.exports = \"<p>\\n  password works!\\n</p>\\n\"","module.exports = \"<div>\\n  <h2>Register</h2>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"registerForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"username\\\">Username</label>\\n      <input [ngClass]=\\\"{ 'is-invalid': submitted && formControls.username.errors }\\\" class=\\\"form-control\\\"\\n             formControlName=\\\"username\\\" id=\\\"username\\\"\\n             type=\\\"text\\\"/>\\n      <div *ngIf=\\\"submitted\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"formControls.username.errors.required\\\">Username is required</div>\\n        <div *ngIf=\\\"formControls.username.errors.minLength\\\">Username minimum length should be 6 characters</div>\\n        <div *ngIf=\\\"formControls.username.errors.maxlength\\\">Username maximum length should be 16 characters</div>\\n        <div *ngIf=\\\"formControls.username.errors.usernameInvalidCharacters\\\">Invalid Username. No Special characters are allowed on Username</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email</label>\\n      <input [ngClass]=\\\"{ 'is-invalid': submitted && formControls.email.errors }\\\" class=\\\"form-control\\\"\\n             formControlName=\\\"email\\\" id=\\\"email\\\"\\n             type=\\\"text\\\"/>\\n      <div *ngIf=\\\"submitted && formControls.username.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"formControls.email.errors.required\\\">Email is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"password\\\">Password</label>\\n      <input [ngClass]=\\\"{ 'is-invalid': submitted && formControls.password.errors }\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" id=\\\"password\\\" type=\\\"password\\\"/>\\n      <div *ngIf=\\\"submitted && formControls.password.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"formControls.password.errors.required\\\">Password is required</div>\\n        <div *ngIf=\\\"formControls.password.errors.minLength\\\">Password minimum length should be 6 characters</div>\\n        <div *ngIf=\\\"formControls.password.errors.maxlength\\\">Username maximum length should be 16 characters</div>\\n        <div *ngIf=\\\"formControls.password.errors.nullValidator\\\">Password should not be null</div>\\n        <div *ngIf=\\\"formControls.password.errors.passwordInvalidCharacters\\\"  class=\\\"cross-validation-error-message alert alert-danger\\\">Invalid special characters on Username. Valid characters are @, #, &, %, !,$ </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"confirmPassword\\\">Confirm Password</label>\\n      <input [ngClass]=\\\"{ 'is-invalid': submitted && formControls.confirmPassword.errors }\\\" class=\\\"form-control\\\" formControlName=\\\"confirmPassword\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\"/>\\n      <div *ngIf=\\\"submitted && formControls.confirmPassword.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"formControls.confirmPassword.errors.required\\\">Confirmation Password is required</div>\\n        <div *ngIf=\\\"formControls.confirmPassword.errors.minLength\\\">Confirmation Password minimum length should be 6 characters</div>\\n        <div *ngIf=\\\"formControls.confirmPassword.errors.maxlength\\\">Confirmation Username maximum length should be 16 characters</div>\\n        <div *ngIf=\\\"formControls.confirmPassword.errors.nullValidator\\\">Confirmation Password should not be null</div>\\n        <div *ngIf=\\\"formControls.confirmPassword.errors.passwordConfirmInvalidCharacters\\\">Invalid special characters on Username. Valid characters are @, #, &, %, !,$ </div>\\n        <div *ngIf=\\\"!formControls.confirmPassword.errors.passwordsMatched && formControls.confirmPassword.touched || formControls.confirmPassword.dirty \\\">Confirmation password should match original Password </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Submit</button>\\n      <!--[disabled]=\\\"!registerForm.valid\\\"-->\\n    </div>\\n  </form>\\n\\n</div>\\n\"","module.exports = \"<p>\\n  settings works!\\n</p>\\n\"","module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div>\\n  <h2>Edit Profile</h2>\\n\\n  <br/>\\n  <form  [formGroup]=\\\"userProfileForm\\\">\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"firstName\\\" formControlName=\\\"firstName\\\" required placeholder=\\\"First name\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"lastName\\\" formControlName=\\\"lastName\\\" required placeholder=\\\"Last Name\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\"  id=\\\"email\\\" formControlName=\\\"email\\\" required placeholder=\\\"Enter email\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"phone\\\">Phone</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\" placeholder=\\\"Enter phone\\\" required>\\n      </div>\\n    </div>\\n    <br/>\\n  <div>\\n    <h3>Addresses:</h3> <br/>\\n    <div>\\n      <button (click)=\\\"openModal(addressEditModal,null)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Create New</button>\\n      <br/> <br/>\\n    </div>\\n    <div *ngFor=\\\"let address of addresses\\\">\\n    <div class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"form-group\\\">\\n          <b>{{address.addressType.type}}:</b> <br/>\\n          <label>{{address.streetName}} Apt {{address.apartment}}</label> <br>\\n          <label>{{address.city.name}}, {{address.state.code}} - {{address.zipCode}}</label> <br>\\n          <label>{{address.country.name}}</label>\\n        </div>\\n        <button (click)=\\\"openModal(addressEditModal,address)\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Edit</button>\\n        <button (click)=\\\"deleteAddress(address)\\\" class=\\\"btn btn-danger\\\" type=\\\"button\\\" style=\\\"margin: 20px\\\">Delete</button>\\n      </div>\\n    </div> <br/>\\n    </div>\\n\\n    <ng-template #addressEditModal>\\n      <div (click)=\\\"modalRef.hide()\\\" class=\\\"modal-header\\\">\\n        <h3 class=\\\"modal-title\\\">Edit Address</h3>\\n        <button aria-label=\\\"Close\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" type=\\\"button\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <div formGroupName=\\\"address\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>Address Type\\n              <select [compareWith]=\\\"compareAddressTypeFn\\\" class=\\\"form-control\\\" formControlName=\\\"addressType\\\"\\n                      name=\\\"addressType\\\">\\n                <option *ngFor=\\\"let addressType of addressTypes\\\" [ngValue]=\\\"addressType\\\">\\n                  {{addressType.type}}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"col-6\\\">\\n              <label for=\\\"streetName\\\">Street Name</label>\\n              <input class=\\\"form-control\\\" formControlName=\\\"streetName\\\" id=\\\"streetName\\\" placeholder=\\\"Enter Street Name\\\"\\n                     required type=\\\"text\\\">\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"col-6\\\">\\n              <label for=\\\"apartment\\\">Apartment</label>\\n              <input class=\\\"form-control\\\" formControlName=\\\"apartment\\\" id=\\\"apartment\\\" placeholder=\\\"Enter Apartment Number\\\"\\n                     required type=\\\"text\\\">\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label>Country\\n              <select (change)=\\\"loadStates()\\\" [compareWith]=\\\"compareCountryFn\\\" class=\\\"form-control\\\" formControlName=\\\"country\\\"\\n                      name=\\\"country\\\">\\n                <option *ngFor=\\\"let country of countries\\\" [ngValue]=\\\"country\\\">\\n                  {{country.name}}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>State\\n              <select (change)=\\\"loadCities()\\\"  [compareWith]=\\\"compareStateFn\\\" class=\\\"form-control\\\" formControlName=\\\"state\\\"\\n                      name=\\\"state\\\">\\n                <option *ngFor=\\\"let state of states\\\" [ngValue]=\\\"state\\\">\\n                  {{state.name}}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>City\\n              <select [compareWith]=\\\"compareCityFn\\\" class=\\\"form-control\\\" formControlName=\\\"city\\\" name=\\\"city\\\">\\n                <option *ngFor=\\\"let city of cities\\\" [ngValue]=\\\"city\\\">\\n                  {{city.name}}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"col-3\\\">\\n              <label for=\\\"zipCode\\\">Zip Code</label>\\n              <input class=\\\"form-control\\\" formControlName=\\\"zipCode\\\" id=\\\"zipCode\\\" placeholder=\\\"Enter Zip Code\\\"\\n                     required type=\\\"text\\\">\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button (click)=\\\"updateUserAddress()\\\" class=\\\"btn btn-primary\\\" type=\\\"button\\\">Update</button>\\n        <button (click)=\\\"modalRef.hide()\\\" class=\\\"btn btn-danger\\\" type=\\\"button\\\">Cancel</button>\\n      </div>\\n    </ng-template>\\n    </div>\\n    <br/> <br/> <br/>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  (click)=\\\"updateUserProfile()\\\">Update</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\"  style=\\\"margin-left: 30px\\\" (click)=\\\"goBack()\\\">Cancel</button>\\n  </form>\\n</div>\\n\"","module.exports = \"<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" color=\\\"#fff\\\" size=\\\"large\\\" type=\\\"ball-elastic-dots\\\"></ngx-spinner>\\n\\n<div *ngIf=\\\"userProfileDataAvailable()\\\">\\n<h1>Profile</h1> <br>\\n  <form [formGroup]=\\\"userProfileForm\\\">\\n    <div class=\\\"form-row  align-items-center\\\">\\n      <div class=\\\"col-auto mb-3\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input class=\\\"form-control\\\" formControlName=\\\"username\\\" id=\\\"username\\\" name=\\\"username\\\" type=\\\"text\\\" readonly>\\n        <small class=\\\"form-text text-muted\\\" id=\\\"emailHelp\\\"></small>\\n      </div>\\n      <div class=\\\"col-auto mb-3\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input class=\\\"form-control\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\" type=\\\"text\\\" readonly>\\n      </div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input  type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\" readonly>\\n      </div>\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"email\\\">Email</label> <br/>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"email\\\" id=\\\"email\\\" readonly>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-auto\\\">\\n        <label for=\\\"phone\\\">Phone</label> <br/>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"phone\\\" id=\\\"phone\\\"  readonly >\\n      </div>\\n  </div>\\n    <br> <br>\\n\\n    <div >\\n      <h3>Addresses:</h3>\\n      <div  *ngFor=\\\"let address of addresses\\\">\\n        <div   class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\n          <div class=\\\"card-body\\\">\\n            <b>{{address.addressType.type}}:</b> <br/>\\n            <label>{{address.streetName}} Apt {{address.apartment}}</label> <br>\\n            <label>{{address.city.name}}, {{address.state.code}} - {{address.zipCode}}</label> <br>\\n            <label>{{address.country.name}}</label>\\n          </div>\\n        </div>\\n        <br>\\n      </div>\\n    </div>\\n\\n    <button (click)=\\\"editUserProfile()\\\" class=\\\"btn btn-primary\\\"  type=\\\"button\\\">Edit</button>\\n    <button (click)=\\\"goHome()\\\" class=\\\"btn btn-primary\\\" style=\\\"margin-left: 30px\\\" type=\\\"submit\\\">Home</button>\\n\\n  </form>\\n\\n</div>\\n\"","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {RegisterComponent} from './register/register.component';\nimport {ActivateComponent} from './activate/activate.component';\nimport {PasswordResetComponent} from './password-reset/password-reset.component';\nimport {UserProfileComponent} from './user-profile/user-profile.component';\nimport {SettingsComponent} from './settings/settings.component';\nimport {UserProfileEditComponent} from './user-profile/user-profile-edit/user-profile-edit.component';\n\nexport const accountManagementRoutes: Routes=[\n  {path: 'register', component: RegisterComponent},\n  {path: 'activate', component: ActivateComponent},\n  {path: 'password_reset', component: PasswordResetComponent},\n  {path: 'profile', component: UserProfileComponent},\n  {path: 'profile/edit', component: UserProfileEditComponent},\n  {path: 'settings', component: SettingsComponent}\n];\n\n@NgModule(\n  {\n    imports: [\n      RouterModule.forChild(accountManagementRoutes)\n    ],\n    exports: [\n      RouterModule\n    ]\n  } )\n\nexport class AccountRoutingModule\n{\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule} from '@angular/common';\n\nimport {ActivateComponent} from './activate/activate.component';\nimport {RegisterComponent} from './register/register.component';\nimport {PasswordComponent} from './password/password.component';\nimport {SettingsComponent} from './settings/settings.component';\nimport {PasswordResetComponent} from './password-reset/password-reset.component';\nimport {UserProfileComponent} from './user-profile/user-profile.component';\nimport {AccountRoutingModule} from './account-routing.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UserProfileEditComponent} from './user-profile/user-profile-edit/user-profile-edit.component';\nimport {NgxSpinnerModule} from 'ngx-spinner';\nimport {ModalModule} from 'ngx-bootstrap';\n\n\n@NgModule({\n  imports: [\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    ModalModule.forRoot(),\n    NgxSpinnerModule,\n    AccountRoutingModule\n  ],\n  declarations: [\n    ActivateComponent,\n    RegisterComponent,\n    PasswordComponent,\n    SettingsComponent,\n    PasswordResetComponent,\n    UserProfileComponent,\n    UserProfileEditComponent\n  ]\n})\nexport class AccountModule { }\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvYWN0aXZhdGUvYWN0aXZhdGUuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-activate',\n  templateUrl: './activate.component.html',\n  styleUrls: ['./activate.component.css']\n})\nexport class ActivateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.css']\n})\nexport class PasswordResetComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvcGFzc3dvcmQvcGFzc3dvcmQuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.component.html',\n  styleUrls: ['./password.component.css']\n})\nexport class PasswordComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export class RegisterUser\n{\n  username: string;\n  password: string;\n  email: string;\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthService} from '../../core/auth/auth.service';\nimport {confirmPasswordValidator, passwordValidator, usernameValidator} from './registerform-validator';\nimport {RegisterService} from './register.service';\nimport {HttpHeaders} from '@angular/common/http';\nimport {RegisterUser} from './register-user';\nimport {environment} from '../../../environments/environment';\n\n@Component( {\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n} )\nexport class RegisterComponent implements OnInit\n{\n  registerForm: FormGroup;\n  returnUrl: string;\n  submitted: boolean;\n\n  constructor(private formBuilder:FormBuilder,private route:ActivatedRoute,private router:Router, private authService:AuthService, private registerService:RegisterService)\n  {\n    this.authService.logout();\n  }\n\n  // convenience getter for easy access to form fields\n  get formControls()\n  {\n    return this.registerForm.controls;\n  }\n\n  ngOnInit()\n  {\n    this.registerForm=this.formBuilder.group(\n      {\n        username: ['', [Validators.required, Validators.minLength( 4 ), Validators.maxLength( 16 ), Validators.nullValidator, usernameValidator()]],\n        email: ['',[Validators.required,Validators.email,Validators.nullValidator]],\n        password: ['', [Validators.required, Validators.minLength( 4 ), Validators.maxLength( 16 ), Validators.nullValidator, passwordValidator()]],\n        confirmPassword: ['', [Validators.required, Validators.minLength( 4 ),\n          Validators.maxLength(16),Validators.nullValidator,confirmPasswordValidator()]],\n      },{validator: this.checkIfMatchingPasswords('password', 'confirmPassword')});\n    this.returnUrl=this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n\n  onSubmit()\n  {\n    //console.warn(this.registerForm.value);\n    this.submitted=true;\n    let registerUser=new RegisterUser();\n    registerUser.username=this.formControls.username.value;\n    registerUser.email=this.formControls.email.value;\n    registerUser.password=this.formControls.password.value;\n\n    let url=environment.SERVER_URL+'register';\n    const httpOptions = {\n      headers: new HttpHeaders(\n        {\n          'Content-Type':  'application/json'\n        })};\n\n    this.registerService.registerUser(url,registerUser,httpOptions).subscribe(\n      response =>\n      {\n          console.log('User Registration Completed  '+response);\n          this.router.navigate(['/home']);\n      },\n      error => console.log('error: '+error),\n      ()=>console.log('User Registration Completed ')\n    );\n\n  }\n\n  private checkIfMatchingPasswords(password: string, confirmPassword: string)\n  {\n    return (group: FormGroup) =>\n    {\n      let passwordInput = group.controls[password],\n        passwordConfirmationInput = group.controls[confirmPassword];\n      if (passwordInput.value !== passwordConfirmationInput.value)\n      {\n        return passwordConfirmationInput.setErrors({passwordsMatched: false});\n      }\n      else\n        {\n        return passwordConfirmationInput.setErrors(null);\n      }\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {RegisterUser} from './register-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService\n{\n\n  constructor(private httpClient:HttpClient) { }\n\n  registerUser(url: string, registerUser: RegisterUser, httpOptions: { headers: HttpHeaders })\n  {\n    return this.httpClient.post<any>(url,registerUser,httpOptions);\n  }\n}\n","import {AbstractControl, FormGroup, ValidatorFn} from '@angular/forms';\n\nexport function usernameValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: boolean } | null => {\n    let usernamePattern=/^[0-9a-zA-Z0-9]+$/;\n    if (control.value !== undefined && (isNaN(control.value)) &&   !usernamePattern.test(control.value))\n    {\n      return {usernameInvalidCharacters: true};\n    }\n\n    if (control.value !== undefined && (isNaN(control.value)) &&  control.value.length <= 6)\n    {\n      return {minLength: true};\n    }\n    return null;\n  };\n}\n\n\nexport function passwordValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: boolean } | null => {\n    let passwordPattern=/^[0-9@#$&%!a-zA-Z0-9]+$/;\n    if (control.value !== undefined && (isNaN(control.value))&&   !passwordPattern.test(control.value))\n    {\n      return {passwordInvalidCharacters: true};\n    }\n    if (control.value !== undefined && (isNaN(control.value)) &&  control.value.length <= 6)\n    {\n      return {minLength: true};\n    }\n    return null;\n  };\n}\n\n\n\nexport function confirmPasswordValidator(): ValidatorFn\n{\n  return (control: AbstractControl): { [key: string]: boolean } | null =>\n  {\n    let confirmPasswordPattern=/^[0-9@#$&%!a-zA-Z0-9]+$/;\n    if (control.value !== undefined && (isNaN(control.value)) &&   !confirmPasswordPattern.test(control.value))\n    {\n      return {passwordConfirmInvalidCharacters: true};\n    }\n    if (control.value !== undefined && (isNaN(control.value)) &&  control.value.length <= 6)\n    {\n      return {minLength: true};\n    }\n    return null;\n  };\n}\n\n\nexport function matchPasswordValidator(formGroup: FormGroup): ValidatorFn\n{\n  return (control: AbstractControl): { [key: string]: boolean } | null =>\n  {\n    if (control.value !== undefined && (isNaN(control.value)) && (formGroup.controls.username.value === control.value))\n    {\n      return { passwordsMatched: true };\n    }\n    return null;\n  };\n}\n\n\n/*\nexport const matchPasswordValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  return password && confirmPassword && password.value === confirmPassword.value ? { passwordsMatched: true } : null;\n};\n*/\n\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvc2V0dGluZ3Mvc2V0dGluZ3MuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Address} from '../../../api/address/model/address';\nimport {User} from '../../../core/user/model/user';\n\nexport class UserProfile\n{\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  addresses: Array<Address>;\n  user: User;\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvdXNlci1wcm9maWxlL3VzZXItcHJvZmlsZS1lZGl0L3VzZXItcHJvZmlsZS1lZGl0LmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit, TemplateRef} from '@angular/core';\nimport {UserProfile} from '../model/user-profile';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {BsModalRef, BsModalService} from 'ngx-bootstrap/modal';\nimport {Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {\n  ADDRESS_API_URL,\n  ADDRESS_TYPE_API_URL,\n  CITY_API_URL,\n  COUNTRY_API_URL,\n  STATE_API_URL,\n  USER_PROFILE_API_URL\n} from '../../../app.constants';\nimport {AddressType} from '../../../api/address-type/model/address-type';\nimport {Country} from '../../../api/country/model/country';\nimport {State} from '../../../api/state/model/state';\nimport {City} from '../../../api/city/model/city';\nimport {CityService} from '../../../api/city/services/city.service';\nimport {StateService} from '../../../api/state/services/state.service';\nimport {CountryService} from '../../../api/country/services/country.service';\nimport {AddressTypeService} from '../../../api/address-type/service/address-type.service';\nimport {AddressService} from '../../../api/address/service/address.service';\nimport {AuthService} from '../../../core/auth/auth.service';\nimport {UserProfileService} from '../service/user-profile.service';\nimport {Address} from '../../../api/address/model/address';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-user-profile-edit',\n  templateUrl: './user-profile-edit.component.html',\n  styleUrls: ['./user-profile-edit.component.css']\n})\nexport class UserProfileEditComponent implements OnInit\n{\n  userProfile: UserProfile;\n  addressTypes: Array<AddressType>;\n  addresses: Array<Address>;\n  countries: Array<Country>;\n  states: Array<State>;\n  cities: Array<City>;\n\n  modalRef: BsModalRef;\n\n  userProfileForm=new FormGroup(\n    {\n                id: new FormControl( {value: '', disabled: true} ),\n                firstName: new FormControl( '' ),\n                lastName: new FormControl( '' ),\n                email: new FormControl( '' ),\n                phone: new FormControl( '' ),\n                address: new FormGroup(\n                  {\n                            addressType: new FormControl( '' ),\n                            id: new FormControl( '' ),\n                            streetName: new FormControl( '' ),\n                            apartment: new FormControl( '' ),\n                            city: new FormControl( '' ),\n                            state: new FormControl( '' ),\n                            country: new FormControl( '' ),\n                            zipCode: new FormControl( '' ),\n                          }),\n            } );\n\n\n  constructor(private authService: AuthService,\n              private userProfileService:UserProfileService,\n              private spinnerService:NgxSpinnerService,\n              private cityService:CityService,\n              private stateService:StateService,\n              private countryService:CountryService,\n              private addressTypeService:AddressTypeService,\n              private addressService:AddressService,\n              private router: Router,\n              private modalService: BsModalService)\n  {\n  }\n\n  ngOnInit()\n  {\n    this.getUserProfile();\n    this.loadAddressTypes();\n    this.loadCountries();\n  }\n\n  openModal(template: TemplateRef<any>, address: Address)\n  {\n    this.modalRef = this.modalService.show(template);\n    if(address!=null)\n    {\n      this.userProfileForm.patchValue(\n        {\n          address: address\n        }\n      );\n      this.loadStates();\n      this.loadCities();\n    }\n    else\n    {\n\n    }\n  }\n\n  private getUserProfile()\n  {\n    let userProfileId=this.authService.currentUserSubject.value.userProfile.id;\n    let userProfileUrl=environment.SERVER_URL+USER_PROFILE_API_URL+userProfileId;\n\n    this.userProfileService.getUserProfile(userProfileUrl).subscribe(\n      data=>\n      {\n        this.userProfile=data;\n        this.userProfileForm.patchValue(\n          {\n            id: data.id,\n            username: data.user.username,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            phone: data.phone,\n            user: data.user\n          }\n        );\n        this.addresses=data.addresses;\n      },\n      error1 =>\n      {\n        console.log('Failed to get User Profile information');\n      }\n    );\n  }\n\n  updateUserProfile()\n  {\n    this.spinnerService.show();\n\n    const userProfileUrl=environment.SERVER_URL+USER_PROFILE_API_URL+'update';\n    let userProfileId=this.authService.currentUserSubject.value.userProfile.id;\n    let userProfile=new UserProfile();\n    userProfile.id=userProfileId;\n    userProfile.firstName=this.userProfileForm.value.firstName;\n    userProfile.lastName=this.userProfileForm.value.lastName;\n    userProfile.email=this.userProfileForm.value.email;\n    userProfile.phone=this.userProfileForm.value.phone;\n    //userProfile.addresses=[this.userProfileForm.value.address];\n\n    this.userProfileService.updateUserProfile( userProfileUrl, userProfile ).subscribe(\n      data =>\n      {\n        userProfile=data;\n        console.log( 'UserProfile updated' );\n        this.router.navigate( ['/profile'] );\n      },\n      error1 =>\n      {\n        console.log( 'UserProfile update failed' );\n        this.spinnerService.hide();\n      }\n    );\n\n\n  }\n\n\n  updateUserAddress()\n  {\n    const addressApiUrl=environment.SERVER_URL+ADDRESS_API_URL+'update';\n    this.addressService.updateAddress(addressApiUrl,this.userProfileForm.value.address).subscribe(\n      data=>\n      {\n        this.getUserProfile();\n        this.modalRef.hide();\n      },\n      error1 =>\n      {\n        console.log('Failed to updated address. Error: '+error1);\n      }\n    );\n  }\n\n\n  deleteAddress(address: Address)\n  {\n    const addressApiUrl=environment.SERVER_URL+ADDRESS_API_URL+'delete/'+address.id;\n    this.addressService.deleteAddress(addressApiUrl).subscribe(\n      data=>\n      {\n        this.getUserProfile();\n      },\n      error1 =>\n      {\n\n      }\n    );\n\n  }\n\n  private loadAddressTypes()\n  {\n    const url=environment.SERVER_URL+ADDRESS_TYPE_API_URL+'list';\n    this.addressTypeService.getAddressTypes(url).subscribe(\n      addressTypes =>\n      {\n        this.addressTypes=addressTypes;\n        this.userProfileForm.patchValue(\n          {\n            addressType: addressTypes\n          }\n        );\n        console.log('Successfully loaded address types');\n      },\n      error1 =>\n      {\n        console.log('Failed to load address types');\n      }\n    );\n  }\n\n  private loadCountries()\n  {\n    const url=environment.SERVER_URL+COUNTRY_API_URL+'list';\n    this.countryService.getCountries(url).subscribe(\n      countries => {\n        this.countries=countries;\n      },\n      error1 =>\n      {\n\n      }\n    );\n  }\n\n  loadStates()\n  {\n    const country=this.userProfileForm.value.address.country;\n    const url=environment.SERVER_URL+STATE_API_URL+'find/country/'+country.id;\n\n    this.stateService.getStatesByCountryId(url).subscribe(\n      data=>\n      {\n        this.states=data;\n      },\n      error1 => {\n        console.log('Failed to load states');\n      }\n    );\n\n  }\n\n  loadCities()\n  {\n    const state=this.userProfileForm.value.address.state;\n    const url=environment.SERVER_URL+CITY_API_URL+'find/state/'+state.id;\n\n    this.cityService.getCitiesByStateId(url).subscribe(\n      data=>\n      {\n        this.cities=data;\n      },\n      error1 => {\n        console.log('Failed to load cities');\n      }\n    );\n  }\n\n  compareAddressTypeFn(c1: AddressType, c2: AddressType): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCountryFn(c1: Country, c2: Country): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareStateFn(c1: State, c2: State): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  compareCityFn(c1: City, c2: City): boolean\n  {\n    return c1 && c2 ? c1.id === c2.id : c1 === c2;\n  }\n\n  goBack()\n  {\n    this.router.navigate(['/account/profile']);\n  }\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvdXNlci1wcm9maWxlL3VzZXItcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../../core/auth/auth.service';\nimport {UserProfile} from './model/user-profile';\nimport {USER_PROFILE_API_URL} from '../../app.constants';\nimport {UserProfileService} from './service/user-profile.service';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {Address} from '../../api/address/model/address';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {environment} from '../../../environments/environment';\n\n@Component( {\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n} )\nexport class UserProfileComponent implements OnInit\n{\n\n  userProfile: UserProfile;\n  addresses: Array<Address>;\n\n  userProfileForm = new FormGroup(\n    {\n      id: new FormControl({value: '', disabled: true}),\n      firstName: new FormControl(''),\n      username: new FormControl(''),\n      lastName: new FormControl(''),\n      email: new FormControl(''),\n      phone: new FormControl(''),\n      user: new FormControl(''),\n      addresses: new FormControl('')\n    });\n\n  constructor(private authService:AuthService,\n              private userProfileService:UserProfileService,\n              private spinner:NgxSpinnerService,\n              private router:Router)\n  {\n  }\n  ngOnInit()\n  {\n    this.getUserProfile();\n  }\n\n  private getUserProfile()\n  {\n    this.spinner.show();\n\n    let userProfileUrl=environment.SERVER_URL+USER_PROFILE_API_URL+'my_profile';\n    this.userProfileService.getUserProfile(userProfileUrl).subscribe(\n      data=>\n      {\n        this.userProfile=data;\n        this.userProfileForm.patchValue(\n          {\n            id: data.id,\n            username: data.user.username,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            phone: data.phone,\n            user: data.user,\n            addresses: data.addresses\n          }\n        );\n        this.addresses=data.addresses;\n        this.spinner.hide();\n      },\n      error1 =>\n      {\n        console.log('Failed to get User Profile information. Error: '+error1);\n        this.spinner.hide();\n      }\n    );\n  }\n\n  userProfileDataAvailable()\n  {\n    return this.userProfile !== undefined && this.userProfile !== null;\n  }\n\n\n  goHome()\n  {\n    this.router.navigate(['/']);\n  }\n\n  editUserProfile()\n  {\n    this.router.navigate(['/account/profile/edit']);\n  }\n}\n"],"sourceRoot":""}